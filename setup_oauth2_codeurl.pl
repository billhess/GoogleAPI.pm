#======================================================================
#
# Google Developer Console - https://console.developers.google.com
#
# - Create a new project or use existing 
#
# - Within the new project - click on Dashboard on the left
#   Add APIs - use "ENABLE APIS AND SERVICES" at the top
#   This will take you to the Library screen
#   Select - Drive, Calendar, Sheets, etc
#
# - Click "OAuth consent screen" on the left
#   Click on "EDIT APP"
#   Make sure it is marked 'Internal'
#   Provide Application Name
#   Select Scopes - Drive, Sheets, Calendar, etc
#   Add Authorized domains - for example acme.com
#   Application homepage link - https://www.acme.com
#   Application Privacy Policy link - https://www.acme.com
#   Click 'Save' button
#
#   NOTE - https above is required to add some/most APIs
#  
#
# - Click "Credentials" on the left
#   Click on "CREATE CREDENTIALS" on top
#   Select 'OAuth Client ID'
#   Select 'Web Application'
#   Supply a Name - acme_stuff
#   Authorized JavaScript origins - https://www.acme.com
#   Authorized redirect URIs - https://www.acme.com
#   Click 'Create' button
#
# - Under 'Credentials' and 'OAuth 2.0 Client IDs'
#   Click the name and this will display info
#     ClientID
#     Client Secret - may need to be updated from time to time
#
#
# Put the Client ID, Client Secret, Redirect URI and Scope
# in the Storage Dir:
#
#  client_id        From the Google developer console above
#  client_secret    From the Google developer console above
#  redirect_uri     From the Google developer console above
#  scope            Typically only need
#                   https://www.googleapis.com/auth/drive
#
#
# Run GoogleAPI.pm/setup_oauth2_codeurl.pl <STORAGE DIR>
#  REQUIRED VALUES: client_id, redirect_uri, scope
#
#  A URL will be generated
#  Copy the URL into a web browser
#  It will authenticate your Google account and then
#  redirect to the site found in redirect_uri
#  Copy/paste the entire URL into a text editor and separate
#  the value after 'code=' in the query string - up to the next '?'
#  Make sure to convert any escaped characters in the code
#  specifically the front slash near the beginning %2F
#  Pass the 'code' into the next script
#
#  NOTE:  If this results in an error where it cannot find the 'Location'
#         in the HTTP header - a URL will be shown.  This may be used
#         to get to the redirect site for the code/string
#
#
# Run GoogleAPI.pm/setup_oauth2_tokens.pl <STORAGE DIR> <CODE>
#  REQUIRED VALUES: client_secret and code
#
#  This will populate the files in the storage dir
#  Most importantly the access_token and refresh_token
#  which will be used by GoogleAPI.pm for OAuth2
#
#  code             Submit the URL given by
#                   GoogleAPI.pm/setup_oauth2_codeurl.pl
#  access_token     Generated by GoogleAPI.pm/setup_oauth2_tokens.pl
#  refresh_token    Generated by GoogleAPI.pm/setup_oauth2_tokens.pl
#  expires          When the token expires - epoch seconds
#
#
#======================================================================
use strict;

use Data::Dumper;
use GoogleAPI;
use GoogleAPI::Setup;


my $sdir = $ARGV[0];

if( ! -d $sdir ) {
   print "ERROR: Not a directory - $sdir\n\n";
   print "USAGE: setup_oauth2_codeurl.pl <OAUTH2 STORE DIR>\n";
   exit 1;
}

my $g = GoogleAPI->new( { storage_dir => $sdir } );

#print Dumper($g) . "\n\n";
#print Dumper($g->{oauth2}) . "\n\n";


if( $g->{oauth2}->{client_id} eq "" ) {
   print "ERROR: Check $sdir/client_id - Exiting\n";
   exit 1;
}

if( $g->{oauth2}->{redirect_uri} eq "" ) {
   print "ERROR: Check $sdir/redirect_uri - Exiting\n";
   exit 1;
}

if( $g->{oauth2}->{scope} eq "" ) {
   print "ERROR: Check $sdir/scope - Exiting\n";
   exit 1;
}


GoogleAPI::Setup::get_code_url($sdir,
			       $g->{oauth2}->{client_id},
			       $g->{oauth2}->{redirect_uri},
			       $g->{oauth2}->{scope});

