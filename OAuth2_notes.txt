
======================================================================
 Process for setting up a USER ACCOUNT to use the Google APIs
======================================================================

 Go to the Google Developer Console
 https://console.developers.google.com
----------------------------------------------------------------------
Make sure you are in a Project you want to use

- Create a new project or use existing 
  ACME1

- Within the new project - click on Dashboard on the left
  Add APIs - use "ENABLE APIS AND SERVICES" at the top
  This will take you to the Library screen
  Select - Drive, Calendar, Sheets, etc

- Click "OAuth consent screen" on the left
  Click on "EDIT APP"
  Make sure it is marked 'Internal'
  Provide Application Name - ACME1stuff'
  Select Scopes - Drive, Sheets, Calendar, etc
  Add Authorized domains - mydomain.com
  Application homepage link - https://www.mydomain.com
  Application Privacy Policy link - https://www.mydomain.com
  Click 'Save' button

  NOTE - https above is required to add some/most APIs
  

- Click "Credentials" on the left
  Click on "CREATE CREDENTIALS" on top
  Select 'OAuth Client ID'
  Select 'Web Application'
  Supply a Name - acme_stuff
  Authorized JavaScript origins - https://www.mydomain.com
  Authorized redirect URIs - https://www.mydomain.com
  Click 'Create' button

- Under 'Credentials' and 'OAuth 2.0 Client IDs'
  Click the name and this will display info
    ClientID
    Client Secret - may need to be updated from time to time



Put the Client ID, Client Secret, Redirect URI and Scope
in the Storage Directory:
----------------------------------------------------------------------
  client_id        From the Google developer console above
  client_secret    From the Google developer console above
  redirect_uri     From the Google developer console above
  scope            Typically only need
                   https://www.googleapis.com/auth/drive



 Run GoogleAPI.pm/setup_oauth2_codeurl.pl <STORAGE DIR>
----------------------------------------------------------------------
REQUIRED VALUES: client_id, redirect_uri, scope

  - A URL will be generated
  - Copy the URL into a web browser
    It will authenticate your Google account and then
    redirect to the site found in redirect_uri
  - Copy/paste the entire URL into a text editor and separate
    the value after 'code=' in the query string - up to the next '?'
    Make sure to convert any escaped characters in the code
    specifically the front slash near the beginning %2F
  - Pass the 'code' into the next step when
    running setup_oauth2_tokens.pl

  NOTE:  If this results in an error where it cannot find the 'Location'
         in the HTTP header - a URL will be shown.  This may be used
         to get to the redirect site for the code



 Run GoogleAPI.pm/setup_oauth2_tokens.pl <STORAGE DIR> <CODE>
----------------------------------------------------------------------
  REQUIRED VALUES: client_secret and code

  This will populate the files in the storage dir
  Most importantly the access_token and refresh_token
  which will be used by GoogleAPI.pm for OAuth2

  code             Submit the URL given by
                   GoogleAPI.pm/setup_oauth2_codeurl.pl
  access_token     Generated by GoogleAPI.pm/setup_oauth2_tokens.pl
  refresh_token    Generated by GoogleAPI.pm/setup_oauth2_tokens.pl
  expires          When the token expires - epoch seconds





======================================================================
 Process for setting up a SERVICE ACCOUNT to use the Google APIs
======================================================================


 Online docs supporting this topic
----------------------------------------------------------------------
https://developers.google.com/identity/protocols/oauth2/service-account



 Goto the service account console
 https://console.developers.google.com/iam-admin/serviceaccounts
----------------------------------------------------------------------
Make sure you are in a Project you want to use

Click Create service account.

STEP 1
- Enter Service Account Name - ACME1serviceacct
- Click CREATE

STEP 2
- Select the Role - Project > Owner
- Click CONTINUE

STEP 3
- Click CREATE KEY
  Select JSON
  Click CREATE - JSON file will be downloaded - KEEP THIS FILE SAFE
  Click DONE


On the Service Accounts List for the Project
The new Service Account will be listed

- Click on the 3 dots for the service account on the right
  Select EDIT

- Click "SHOW DOMAIN-WIDE DELEGATION" to expose the checkbox
  Mark the checkbox "Enable G Suite Domain-wide Delegation"

- Click SAVE


In the Service Accounts List the "Domain Wide Delegation"
column should now show "Enabled" with a link to "View Client ID"
The client ID is also in the JSON that was downloaded


----------------------------------------------------------------------
 Goto G-Suite Domain Admin
 https://admin.google.com/

 You will need to authenticate as an admin for your G-Suite domain

 Goto App Access Control
 https://admin.google.com/ac/owl

 A Description of the following process is also documented here
 https://support.google.com/a/answer/162106
----------------------------------------------------------------------
Click "MANAGE DOMAIN WIDE DELEGATION" at the bottom
A list of API clients will be shown

Click "Add New"

- Enter the Client ID
  This is a long number - NOT the email assigned to the service account
  This is found in the downloaded JSON from above

- Enter in Scopes
  For example - https://www.googleapis.com/auth/drive
  Scopes can be found within your PROJECT under "Oauth Consent Screen"
  Click "EDIT APP" next to the OAuth App name at the top of the page

Click AUTHORIZE

The name of the OAuth App in your project should be displayed
in the list with the Client ID and Scopes


----------------------------------------------------------------------
 Setup Storage Directory to use Service Account
----------------------------------------------------------------------
Create a storage directory to hold all of the files for authentication

The permissions on this folder and the files in it should be
read/write only for the intended user since it contains a private key
and access tokens - for example on UNIX systems:

mkdir -p /mystuff/data/acme1serviceacct
chmod 600 /mystuff/data/acme1serviceacct


Copy the downloaded JSON file into this directory

cp acme1-245123-52e4a0697001.json /mystuff/data/acme1serviceacct


Run setup_oauth2_serviceacct.pl on the JSON file - pass in:
- full path to the JSON file
- comma separated list of scopes

perl setup_oauth2_serviceacct.pl \
/mystuff/data/acme1serviceacct/acme1-245123-52e4a0697001.json \
https://www.googleapis.com/auth/drive,https://www.googleapis.com/auth/calendar

The following files will be written to the storage dir:

   client_email
   client_id
   private_key
   scope




 Authenticating with the Service Account using GoogleAPI.pm
---------------------------------------------------------------------- 
Set the storage_dir and the storage_type as 'serviceacct'
since the default type is 'user'

You should be able use the API on behalf of other users in the same
domain by specifiying them with the serviceacct_sub key and assigning
their email address

my $g = GoogleAPI->new( { storage_dir  => "/mystuff/data/acme1serviceacct",
                          storage_type => "serviceacct",
                          serviceacct_sub => "joe\@acme.com" } );

# Check and Refresh the token if needed
if( $g->oauth2_check_token() ) {
   print "ERROR: Problem refreshing token\n";
}


The call to oauth2_check_token() will determine if the access token
for the specified user needs to be updated
The following files will be created in the storage directory:

   joe@acme.com_access_token
   joe@acme.com_expires
   joe@acme.com.json

Each specified user will have their own files created

NOTE: If the serviceacct_sub email value is not provided then it will
use the string 'default' and will run as the service account user
which will not have permission to access other user's data in your
domain unless it was shared using the assigned email address.
This usage is not recommended in general.


